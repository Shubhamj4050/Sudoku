import java.util.Scanner;

public class SudokuSolver2 {
    private static final int GRID_SIZE = 9;
    
    public static void main(String[] args) {
        int[][] board = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };
        printBoard(board);

        if(solveBoard(board)){
            System.out.println("Solved succesfully");
        }
        else{
            System.out.println("Unsolvable board");
        }
        printBoard(board);
    }
    
    private static void printBoard(int[][] board){
        for(int row = 0; row < GRID_SIZE; row++){
            if(row % 3 == 0 && row != 0){
                System.out.println("-----------");
            }
            for(int col=0; col<GRID_SIZE;col++){
                if(col % 3 == 0 && col!= 0){
                    System.out.println("|");
                }
                System.out.print(board[row][col]);
            }
        }
    }
    private static boolean isNumberInrow(int[][] board, int number, int row){
        for(int i = 0; i< GRID_SIZE; i++){
            if (board[row][i] == number){
                return true;
            }
            System.out.println();
        }
        return false;
    }

    private static boolean isNumberInCol(int[][] board, int number, int col){
        for(int i = 0; i< GRID_SIZE; i++){
            if (board[i][col] == number){
                return true;
            }
        }
        return false;
    }

    private static boolean isNumberInBox(int[][] board, int number, int row,int col){
        int srow= row - row%3;
        int scol= col - col%3;
        for(int i = srow ; i< srow +3; i++){
            for(int j= scol; j< scol +3; j++){
                if (board[i][j]==number){
                    return true;
                }
            }
            
        }
        return false;
    }
    private static boolean isValidPlacement(int[][] board, int number, int row, int col){
        return !isNumberInrow(board, number, row) &&
            !isNumberInCol(board, number, col) &&
            !isNumberInBox(board,number,row, col);
    }
    private static boolean solveBoard(int[][] board){
        for(int row= 0; row<GRID_SIZE; row++){
            for(int col=0; col< GRID_SIZE;col++){
                if( board[row][col]==0){
                    for(int numbertoTry =1;numbertoTry <= GRID_SIZE; numbertoTry++){
                        if(isValidPlacement(board, numbertoTry,row,col)){
                            board[row][col] = numbertoTry;
                            if(solveBoard(board)){
                                return true;
                            }
                            else{
                                board[row][col]=0;
                            }

                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
}
